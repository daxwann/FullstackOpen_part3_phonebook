{"version":3,"sources":["services/personService.js","components/NewPersonForm.js","components/FilterPersons.js","components/Person.js","components/DisplayPersons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","id","delete","updatedPerson","put","NewPersonForm","props","useState","newName","setNewName","newNumber","setNewNumber","confirmUpdate","foundPerson","window","confirm","name","number","console","log","personService","returnedPerson","setPersons","persons","map","person","notify","catch","error","onSubmit","event","preventDefault","find","concat","value","onChange","handleInput","type","FilterPerson","searchTerm","handleFilterInput","Person","onClick","deletePerson","DisplayPersons","regex","RegExp","filtered","filter","match","p","key","showRow","Notification","notification","className","message","App","setSearchTerm","setNotification","callback","target","msg","setTimeout","useEffect","returnedPersons","FilterPersons","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a4864b4.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nconst baseUrl = \"api/persons\"\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n}\n\nconst createPerson = newPerson => {\n  const request = axios.post(baseUrl, newPerson);\n  return request.then(response => response.data);\n}\n\nconst deletePerson = id => {\n  return axios.delete(baseUrl + id);\n}\n\nconst updatePerson = (id, updatedPerson) => {\n  const request = axios.put(baseUrl + id, updatedPerson);\n  return request.then(response => response.data);\n}\n\nexport default { getAll, createPerson, deletePerson, updatePerson };","import React, { useState } from 'react';\nimport personService from '../services/personService';\n\nconst NewPersonForm = props => {\n\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n\n  const findName = (name) => {\n    return props.persons.find(person => person.name === name);\n  }\n\n  const confirmUpdate = foundPerson => {\n    if (window.confirm(`${foundPerson.name} already exist in the phonebook. Do you want to replace the old number with the new one?`)) {\n      const updatedPerson = { ...foundPerson, number: newNumber }\n      console.log(updatedPerson);\n\n      personService\n        .updatePerson(foundPerson.id, updatedPerson)\n        .then(returnedPerson => {\n          props.setPersons(props.persons.map(person => person.id !== foundPerson.id ? person : returnedPerson));\n\n          //success message\n          props.notify(\"success\", `${returnedPerson.name}'s number has been updated`)\n\n          //clear inputs\n          setNewName('');\n          setNewNumber('');\n        })\n\t\t\t\t.catch(error => {\n          //error message\n\t\t\t\t\tprops.notify(\"error\", `${updatedPerson.name} has already been deleted`)\n\t\t\t\t})\n    }\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    \n    const foundPerson = findName(newName);\n\n    if (foundPerson) {\n      confirmUpdate(foundPerson);\n    } else {\n      //create new person\n      const newPerson = {\n       name: newName,\n       number: newNumber\n      }\n\n      personService\n        .createPerson(newPerson)\n        .then(returnedPerson => {\n          props.setPersons(props.persons.concat(returnedPerson));\n\n          //success message\n          props.notify(\"success\", `${returnedPerson.name}'s number has been added`)\n\n          //clear inputs\n          setNewName('');\n          setNewNumber('');\n        })\n        .catch(error => {\n          props.notify(\"error\", `Failed to add ${newPerson.name}'s number`)\n        })\n    }\n  }\n\n  return (\n    <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={props.handleInput(setNewName)}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={props.handleInput(setNewNumber)}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n    </form>\n  )\n}\n\nexport default NewPersonForm;","import React from 'react';\n\nconst FilterPerson = props => {\n  return (\n    <form>\n      <div>\n        filter shown with <input value={props.searchTerm} onChange={props.handleFilterInput}/>\n      </div>\n    </form>\n  )\n}\n\nexport default FilterPerson","import React from 'react';\n\nconst Person = props => {\n  const confirmDelete = () => {\n    if (window.confirm(`Delete ${props.person.name}?`)) {\n      props.deletePerson(props.person.id, props.person.name);\n    }\n  }\n\n  return (\n    <div>\n      {props.person.name} {props.person.number} <button onClick={confirmDelete}>delete</button>\n    </div>\n  )\n}\n\nexport default Person","import React from 'react';\nimport Person from './Person';\nimport personService from '../services/personService';\n\nconst DisplayPersons = props => {\n  const showRow = () => {\n    const regex = new RegExp(props.searchTerm, 'i');\n    const filtered = props.persons.filter(person => {\n      return person.name.match(regex)\n    });\n\n    const deletePerson = (id, name) => {\n      personService\n        .deletePerson(id)\n        .then(response => {\n          props.setPersons(props.persons.filter(p => p.id !== id));\n          props.notify(\"success\", `Deleted ${name}`)\n        })\n        .catch(error => {\n          props.notify(\"error\", `Failed to delete ${name}`)\n        })\n    }\n\n    return filtered.map((person) => <Person key={person.id} person={person} deletePerson={deletePerson}/>);\n  }\n\n  return (\n    <div>\n      {showRow()}\n    </div>\n  )\n}\n\nexport default DisplayPersons;","import React from 'react'\n\nconst Notification = ({notification}) => {\n\tif (notification.type === '') {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<div className={`notification notification--${notification.type}`}>\n\t\t  {notification.message}\n\t\t</div>\n\t)\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react';\nimport personService from './services/personService'\nimport NewPersonForm from './components/NewPersonForm'\nimport FilterPersons from './components/FilterPersons'\nimport DisplayPersons from './components/DisplayPersons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ searchTerm, setSearchTerm] = useState('')\n  const [ notification, setNotification] = useState({ type: '', message: '' })\n\n  const handleInput = (callback, event) => {\n    return (event) => { callback(event.target.value) };\n  }\n\n  const notify = (type, msg) => {\n    setNotification({type: type, message: msg});\n    setTimeout(() => {\n      setNotification({type: '', message: ''});\n    }, 5000)\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(returnedPersons => {\n        setPersons(returnedPersons);\n      })\n      .catch(error => {\n        notify(\"error\", \"failed to retrieve all entries\");\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification}/>\n      <FilterPersons searchTerm={searchTerm} handleFilterInput={handleInput(setSearchTerm)} />\n      <h2>Add New</h2>\n      <NewPersonForm \n        persons={persons}\n        setPersons={setPersons}\n        handleInput={handleInput}\n        notify={notify}\n      />\n      <h2>Numbers</h2>\n      <DisplayPersons \n        persons={persons} \n        setPersons={setPersons} \n        searchTerm={searchTerm} \n        notify={notify}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}